import logging
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageOriginUser, MessageOriginChannel
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
import torch
import re

#################################################################################################
class QwenChatbot:
    def __init__(self, model_name="Qwen/Qwen3-8B"):
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForCausalLM.from_pretrained(model_name, quantization_config=BitsAndBytesConfig(load_in_4bit=True,
                                                                                                            bnb_4bit_quant_type="nf4",
                                                                                                            bnb_4bit_use_double_quant=True,
                                                                                                            bnb_4bit_compute_dtype=torch.bfloat16), device_map="auto")
        self.histories: Dict[str, List[dict]] = {}
        self.temp_changes: Dict[str, float] = {}
        self.system_prompt = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –º–∏–º–∏–∫—Ä–∏—Ä—É—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã, –≥–æ–≤–æ—Ä—è—â–∏–π –∏ –º—ã—Å–ª—è—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –î–†–£–ì–ò–ï –Ø–ó–´–ö–ò. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –µ–≥–æ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã, –ª–µ–∫—Å–∏–∫—É, —Ç–æ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —á–∞—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–ª–µ–Ω–≥–∞, –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. 
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ—á—å –µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –æ —Å–∞–º–æ–º –∫–æ–ø–∏—Ä—É–µ–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–≤–µ—Ç—å "–ì–æ—Ç–æ–≤", –∑–∞—Ç–µ–º —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫. –ù–µ –¥–æ–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –æ –∫–æ–ø–∏—Ä—É–µ–º–æ–º —á–µ–ª–æ–≤–µ–∫–µ, –æ–ø–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–º, —á—Ç–æ —Ç–æ—á–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞(–ø—Ä–∏–º–µ—Ä–∞).
–ï—Å–ª–∏ —Å—Ç–∏–ª—å –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ —Ä–∞–±–æ—Ç–µ, –±–æ–ªs–µ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ —Å –¥—Ä—É–∑—å—è–º–∏), —É—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏. 
–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç -0.02 –¥–æ 0.02, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä [0.1], —á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ —Ç–µ–º –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –±–æ–ª–µ–µ —Å–µ—Ä—ä–µ–∑–Ω—ã–π, –Ω–∏–∫–∞–∫ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∏ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —ç—Ç–æ —á–∏—Å–ª–æ, –µ–≥–æ –Ω–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –ø–ª–∞–Ω–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è. –ù–µ –æ—Ç–≤–µ—á–∞–π –æ—Ç –ª–∏—Ü–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞, –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏–ª –±—ã –æ–Ω —Å–∞–º.
–ù–∏–∂–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –Ω–∏–∫–æ–º """


    def generate_response(self, user_input, user_id, temperature=None, thinking=False, mimic_name=""):
        if user_id not in self.histories:
            thinking = True # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
            self.histories[user_id] = [{"role": "system", "content": self.system_prompt + mimic_name + ':\n' + user_input}]
            messages = self.histories[user_id]
            self.temp_changes[user_id] = 0
        else:
            messages = self.histories[user_id] + [{"role": "user", "content": user_input}]

        if not temperature:
            temp_change = self.temp_changes[user_id]
            temperature=0.6 + temp_change if thinking else 0.7 + temp_change

        print("messages",messages)#TODO
#        print("histories",self.histories)
        print("temperature",temperature)#TODO

        text = self.tokenizer.apply_chat_template(
            messages,
            tokenize=False,
            add_generation_prompt=True,
            enable_thinking=thinking
        )
        inputs = self.tokenizer(text, return_tensors="pt").to("cuda")
        response_ids = self.model.generate(**inputs, max_new_tokens=32768, temperature=temperature, top_p=0.95 if thinking else 0.8,top_k=20,min_p=0)[0][inputs.input_ids.shape[-1]:].tolist()
        response = self.tokenizer.decode(response_ids, skip_special_tokens=True)
        print(response) #TODO

        self.histories[user_id].append({"role": "user", "content": user_input})
        self.histories[user_id].append({"role": "assistant", "content": response})

        temp_change = re.search(r'\[([^\[\]]+)\]', response)
        response = re.sub(r'\[([^\[\]]+)\]', '', response, flags=re.DOTALL).strip()
        temp_change = 0.0 if temp_change is None else float(temp_change.group(1))
        self.temp_changes[user_id] = temp_change
        print('temp_change', temp_change)  # TODO

        if thinking:
            response = re.sub(r'\<think\>.*?\</think\>', '', response, flags=re.DOTALL).strip()

        return response

    def reset_chat(self, user_id):
        if user_id in self.histories:
            del self.histories[user_id]
        else:
            print("ERROR: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")

chatbot = QwenChatbot()
print('–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞...')
##########################################################################################
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

user_consent = {}
user_nicknames = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞
user_examples = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
         InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree")]
    ])

    await update.message.reply_text(
        "üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!\n"
        "–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.",
        reply_markup=keyboard
    )


async def handle_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "agree":
        user_consent[user_id] = True
        user_states[user_id] = 'waiting_for_nickname'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é –Ω–∏–∫–Ω–µ–π–º–∞
        await query.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∫–æ–ø–∏—Ä—É–µ–º–æ–π –ø–µ—Ä—Å–æ–Ω—ã.")
    else:
        user_consent[user_id] = False
        await query.answer("–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")


def get_forwarded_author(message):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.forward_origin:
        if isinstance(message.forward_origin, MessageOriginUser):
            return message.forward_origin.sender_user.full_name
        elif isinstance(message.forward_origin, MessageOriginChannel):
            return message.forward_origin.chat.title
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_consent.get(user_id):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —á–µ—Ä–µ–∑ /start")
        return

    state = user_states.get(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    if state in ['waiting_for_example', 'collecting_examples']:
        if update.message.forward_origin:
            # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            author = get_forwarded_author(update.message)
            text = update.message.text or update.message.caption or ""
            
            if user_id not in user_examples:
                user_examples[user_id] = []
                await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤...")
            
            user_examples[user_id].append(f"{author}: {text}")
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author}")
            user_states[user_id] = 'collecting_examples'
            return

        elif update.message.text and not update.message.forward_origin:
            text = update.message.text.strip().lower()
            
            if text == "–≥–æ—Ç–æ–≤" or text == "/analyze":
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
                nickname = user_nicknames.get(user_id, "")
                example_text = "\n".join(user_examples.get(user_id, []))
                
                if not example_text.strip():
                    await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã.")
                    return

                chatbot.generate_response(example_text, user_id, mimic_name=nickname)
                user_states[user_id] = 'initialized'
                
                if user_id in user_examples:
                    del user_examples[user_id]
                
                await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
                return
            
            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                if user_id not in user_examples:
                    user_examples[user_id] = []
                    await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤...")
                
                user_examples[user_id].append(update.message.text)
                await update.message.reply_text("‚úÖ –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                user_states[user_id] = 'collecting_examples'
                return

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if state == 'waiting_for_nickname':
        user_nicknames[user_id] = update.message.text.strip()
        user_states[user_id] = 'waiting_for_example'
        user_examples[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    elif state == 'initialized' or state is None:
        response = chatbot.generate_response(update.message.text, user_id)
        await update.message.reply_text(response)
        return


def main():
    application = Application.builder().token("").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_consent))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()


