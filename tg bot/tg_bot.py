import logging
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
import torch
import re

#################################################################################################
class QwenChatbot:
    def __init__(self, model_name="Qwen/Qwen3-8B"):
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForCausalLM.from_pretrained(model_name, quantization_config=BitsAndBytesConfig(load_in_4bit=True,
                                                                                                            bnb_4bit_quant_type="nf4",
                                                                                                            bnb_4bit_use_double_quant=True,
                                                                                                            bnb_4bit_compute_dtype=torch.bfloat16), device_map="auto")
        self.histories: Dict[str, List[dict]] = {}
        self.temp_changes: Dict[str, float] = {}
        self.system_prompt = """–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –∏—Ö —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã, –ª–µ–∫—Å–∏–∫—É, —Ç–æ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —á–∞—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–ª–µ–Ω–≥–∞, –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. 
–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫. –ù–µ –¥–æ–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –æ –∫–æ–ø–∏—Ä—É–µ–º–æ–º —á–µ–ª–æ–≤–µ–∫–µ, –æ–ø–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–º, —á—Ç–æ —Ç–æ—á–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
–ï—Å–ª–∏ —Å—Ç–∏–ª—å –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ —Ä–∞–±–æ—Ç–µ, –±–æ–ª–µ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ —Å –¥—Ä—É–∑—å—è–º–∏), —É—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏. 
–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç -0.02 –¥–æ 0.02, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä [0.1], —á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ —Ç–µ–º –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –±–æ–ª–µ–µ —Å–µ—Ä—ä–µ–∑–Ω—ã–π, –Ω–∏–∫–∞–∫ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∏ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —ç—Ç–æ —á–∏—Å–ª–æ, –µ–≥–æ –Ω–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –ø–ª–∞–Ω–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è. –ù–µ –æ—Ç–≤–µ—á–∞–π –æ—Ç –ª–∏—Ü–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞, –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏–ª –±—ã –æ–Ω —Å–∞–º.
–ù–∏–∂–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"""


    def generate_response(self, user_input, user_id, temperature=None, thinking=False, mimic_name=""):
        if user_id not in self.histories:
            thinking = True # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
            self.histories[user_id] = [{"role": "system", "content": self.system_prompt + mimic_name + ':\n' + user_input}]
            messages = self.histories[user_id]
            self.temp_changes[user_id] = 0
        else:
            messages = self.histories[user_id] + [{"role": "user", "content": user_input}]

        if not temperature:
            temp_change = self.temp_changes[user_id]
            temperature=0.6 + temp_change if thinking else 0.7 + temp_change

        print("messages",messages)#TODO
#        print("histories",self.histories)
        print("temperature",temperature)#TODO

        text = self.tokenizer.apply_chat_template(
            messages,
            tokenize=False,
            add_generation_prompt=True,
            enable_thinking=thinking
        )
        inputs = self.tokenizer(text, return_tensors="pt").to("cuda")
        response_ids = self.model.generate(**inputs, max_new_tokens=32768, temperature=temperature, top_p=0.95 if thinking else 0.8,top_k=20,min_p=0)[0][inputs.input_ids.shape[-1]:].tolist()
        response = self.tokenizer.decode(response_ids, skip_special_tokens=True)
        print(response) #TODO

        self.histories[user_id].append({"role": "user", "content": user_input})
        self.histories[user_id].append({"role": "assistant", "content": response})


        temp_change = re.search(r'\[([^\[\]]+)\]', response)
        response = re.sub(r'\[([^\[\]]+)\]', '', response, flags=re.DOTALL).strip()
        temp_change = 0.0 if temp_change is None else float(temp_change.group(1))
        self.temp_changes[user_id] = temp_change
        print('temp_change', temp_change)  # TODO

        if thinking:
            response = re.sub(r'\<think\>.*?\</think\>', '', response, flags=re.DOTALL).strip()

        return response

chatbot = QwenChatbot()
print('–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞...')
##########################################################################################
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

user_consent = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
         InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree")]
    ])
    
    await update.message.reply_text(
        "üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!\n"
        "–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.",
        reply_markup=keyboard
    )

async def handle_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if query.data == "agree":
        user_consent[user_id] = True
        await query.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        await query.edit_message_text("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç-–ø—Ä–∏–º–µ—Ä –∫–æ–ø–∏—Ä—É–µ–º–æ–π –ø–µ—Ä—Å–æ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        user_consent[user_id] = False
        await query.answer("–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è"""
    user_id = update.effective_user.id
    
    if not user_consent.get(user_id):
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —á–µ—Ä–µ–∑ /start")
        return
    await update.message.reply_text(chatbot.generate_response(update.message.text, user_id))

def main():
    TOKEN = ""
    
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_consent))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    main()